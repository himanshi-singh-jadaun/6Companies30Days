
class Solution{
public:
    int equalPartition(int N, int arr[])
    {
        // code here
        int sum=0;
        for(int i=0;i<N;i++)
        {
            sum+=arr[i];
        }
        if(sum%2==1)
        {
            return 0;
        }
        bool dp[sum/2+1][N+1];
        for(int i=0;i<=N;i++)
        {
            dp[0][i]=true;
        }
        for(int i=1;i<=sum/2;i++)
        {
            dp[i][0]=false;
        }
        
        for(int i=1;i<=sum/2;i++)
        {
            for(int j=1;j<=N;j++)
            {
                dp[i][j]=dp[i][j-1];
                if(i>=arr[j-1])
                {
                    dp[i][j]=dp[i][j]||dp[i-arr[j-1]][j-1];
                }
            }
        }
        return dp[sum/2][N];
    }
};


----------------------------------------------------------------------------------------------------------------------------------
class Solution{
public:
    // int dp[101][1001];
    // void subsetsum(int arr[], int sum, int n)
    // {
    //     int dp[n+1][sum+1];
    //       memset(dp,0,sizeof(dp));
    //       for( int i=0 ; i<=n; i++)
    //       {
    //           for( int j =0 ; j<=sum;j++)
    //           {
    //               if(i==0)
    //           {
    //               dp[i][j]=0;
    //           }
    //           if(j==0)
    //           {
    //               dp[i][j]=1;
    //           }
    //           }
    //       }
    //       for( int i=0 ; i<=n ; i++)
    //       {
    //           for( int j=0 ; j<=sum;j++)
    //           {
    //               if( arr[i-1]<=j)
    //               {
    //                   dp[i][j]=dp[i][j-arr[i-1]]||dp[i-1][j];
    //               }
    //               else
    //               {
    //                   dp[i][j]=dp[i-1][j];
    //               }
    //           }
    //       }
           
    // }
    // int equalPartition(int n, int arr[])
    // {
    //     // code here
     
    //     int sum=0;
    //     for(int i =0 ; i<n ;i++)
    //     {
    //         sum+=arr[i];
    //     }
    //     if(sum%2==1)return 0;
    //     else
    //     {
       
    //         sum=sum/2;
       
    //         subsetsum(arr,sum, n);
    //         return dp[n][sum];
    //     }
    // }
int equalPartition(int n, int arr[])
{
    int sum = 0;
    int i, j;

    // Calculate sum of all elements
    for (i = 0; i < n; i++)
        sum += arr[i];

    if (sum % 2 != 0)
        return 0;

    int part[sum / 2 + 1];

    // Initialize the part array
    // as 0
    for (i = 0; i <= sum / 2; i++) {
        part[i] = 0;
    }

    // Fill the partition table in bottom up manner

    for (i = 0; i < n; i++) {
        // the element to be included
        // in the sum cannot be
        // greater than the sum
        for (j = sum / 2; j >= arr[i];
             j--) { // check if sum - arr[i]
            // could be formed
            // from a subset
            // using elements
            // before index i
            if (part[j - arr[i]] == 1 || j == arr[i])
                part[j] = 1;
        }
    }

    return part[sum / 2];
}
};
