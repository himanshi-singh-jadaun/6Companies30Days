class Solution{
  public:
    string nextPalin(string N) { 
        //complete the function here
        // int n=N.length();
        // if(n<=3)
        // {
        //     return "-1";
        // }
        // int i,j,mid;
        // mid=(n/2)-1;
        
        // for(i=mid-1;i>=0;i--)
        // {
        //     if(N[i]<N[i+1])
        //     {
        //         break;
        //     }
        // }
        // if(i<0)
        // {
        //     return "-1";
        // }
        // int smallest=i+1;
        // for(int j=i+2;i<=mid;j++)
        // {
        //     if(N[j]>N[i] && N[j]<=N[smallest])
        //     {
        //         smallest=j;
        //     }
        // }
        
        // swap(N[i],N[smallest]);
        // swap(N[n-i-1],N[n-smallest-1]);
        
        // reverse(N.begin()+i+1, N.begin()+mid);
        // if(n%2==0)
        // {
        //     reverse(N.begin()+mid+1,N.begin()+n-i-2);
        // }
        // else{
        //     reverse(N.begin()+mid+2,N.begin()+n-i-2);
        // }
        // return N;
         int n=N.length();
        int mid=(n/2)-1;
        int pos=-1;
        
        for(int i=mid;i>=1;i--){
            if(N[i-1]<N[i]){
                pos=i-1;
                break;
            }
        }
        if(pos==-1){
            return "-1";
        }
        
        int numPos=-1;
        for(int i=pos+1;i<=mid;i++){
            if(N[i]>N[pos]){
               
               if(numPos==-1){
                   numPos=i;
               }
               else{
                   if(N[i]<N[numPos]){
                       numPos=i;
                   }
               }
               
            }
        }
    
        swap(N[pos],N[numPos]);
        sort(N.begin()+pos+1,N.begin()+mid+1);
        int i=0;
        int j=n-1;
        while(i<=mid){
            N[j]=N[i];
            i++;
            j--;
        }
        return N;
    }
};
