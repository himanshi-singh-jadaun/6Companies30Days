/**
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * class MountainArray {
 *   public:
 *     int get(int index);
 *     int length();
 * };
 */

class Solution {
public:
    int findInMountainArray(int target, MountainArray &mountainArr)     {
        auto peak =0, r=mountainArr.length()-1;
        while(peak<r)
        {
            auto m=peak+(r-peak)/2;
            if(mountainArr.get(m) > mountainArr.get(m+1))
            {
                r=m;
            }else{
                peak=m+1;
            }
        }
        auto i=solve(mountainArr,target,0,peak);
        return (i!=-1) ? i : solve(mountainArr,target,peak+1,mountainArr.length()-1,false) ;
    }
    
    int solve (MountainArray &mountainArr , int t, int l , int r ,bool asc=true){
        while(l<=r)
        {
            auto m=l+(r-l)/2;
            auto val =mountainArr.get(m);
            if(val==t)return m;
            else if(asc==val<t)
            {
                l=m+1;
            }else{
                r=m-1;
            }
        }
        return -1;
    }
};




-------------------------------------------------------------------------------------------------------------------------
   int findInMountainArray(int target, MountainArray A) {
        int n = A.length(), l, r, m, peak = 0;
        // find index of peak
        l  = 0;
        r = n - 1;
        while (l < r) {
            m = (l + r) / 2;
            if (A.get(m) < A.get(m + 1))
                l = peak = m + 1;
            else
                r = m;
        }
        // find target in the left of peak
        l = 0;
        r = peak;
        while (l <= r) {
            m = (l + r) / 2;
            if (A.get(m) < target)
                l = m + 1;
            else if (A.get(m) > target)
                r = m - 1;
            else
                return m;
        }
        // find target in the right of peak
        l = peak;
        r = n - 1;
        while (l <= r) {
            m = (l + r) / 2;
            if (A.get(m) > target)
                l = m + 1;
            else if (A.get(m) < target)
                r = m - 1;
            else
                return m;
        }
        return -1;
    }
