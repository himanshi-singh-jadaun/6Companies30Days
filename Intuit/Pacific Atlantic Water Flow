class Solution {
public:
    vector<vector<int>> dir={{-1,0},{0,-1},{1,0},{0,1}};
    void dfs(vector<vector<int>>&heights , int i, int j,int prev, vector<vector<int>>&ocean){
        if(i<0 || i>=ocean.size() || j<0 || j>=ocean[0].size()){
            return ;
        }
        if(ocean[i][j] || heights[i][j]<prev){
            return;
        }
        ocean[i][j]=1;
        for (auto d: dir){
            dfs(heights,i+d[0],j+d[1],heights[i][j],ocean);
        }
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        vector<vector<int>>v;
        if(heights.empty()){
            return v;
        }
        int row=heights.size();
        int col=heights[0].size();
        vector<vector<int>>pacific(row,vector<int>(col,0)),atlantic(row,vector<int>(col,0));
        
        
        for(int i=0;i<row;i++)
        {
            dfs(heights,i,0,INT_MIN,pacific);
            dfs(heights,i,col-1,INT_MIN,atlantic);
        }
        for(int i=0;i<col;i++){
            dfs(heights,0,i,INT_MIN,pacific);
            dfs(heights,row-1,i,INT_MIN,atlantic);
        }
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                vector<int>vec;
                if(pacific[i][j]==1 && atlantic[i][j]==1){
                    vec.push_back(i);
                    vec.push_back(j);
                    v.push_back(vec);
                }
            }
        }
        return v;
    }
};
