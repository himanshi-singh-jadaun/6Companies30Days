class Solution {
public:
    
    bool solvecycle(vector<vector<int>>&adj, vector<int>&vis , int v)
    {
        if(vis[v]==1)
        {
            return true;
        }
        if(vis[v]==2)
        {
            return false;
        }
        vis[v]=1;
        for(int i=0;i<adj[v].size();i++)
        {
            if(solvecycle(adj,vis,adj[v][i]))
            {
                return true;
            }
        }
        vis[v]=2;
        return false;
    }
    
    bool detectcycle(vector<vector<int>>&adj , int V)
    {
        vector<int>vis(V,0);
        for(int i=0;i<V;i++)
        {
            if(!vis[i])
            {
                if(solvecycle(adj,vis,i)){
                    return true;
                }
            }
        }
        return false;
    }
    
    void dfs(vector<vector<int>>&adj , vector<int>&vis, stack<int>&s, int v)
    {
        vis[v]=1;
        for(int i=0;i<adj[v].size();i++)
        {
            if(!vis[adj[v][i]])
            {
                dfs(adj,vis,s,adj[v][i]);
            }
        }
        s.push(v);
    }
    
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int>v;
        vector<vector<int>>adj(numCourses);
        int n=prerequisites.size();
        for(int i=0;i<n;i++)
        {
            adj[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }
        
        if(detectcycle(adj,numCourses))
        {
            return v;
        }
        
        stack<int>s;
        vector<int>vis(numCourses,0);
        for(int i=0;i<numCourses;i++)
        {
            if(!vis[i])
            {
                dfs(adj,vis,s,i);
            }
        }
        
        while(!s.empty())
        {
            v.push_back(s.top());
            s.pop();
        }
        return v;
        
    }
};
