
---------------------------------------------------------------//recursive----------------------------------------------------------------------------------------

// C++ implementation to count number of
// decodings that can be formed from a
// given digit sequence
#include <cstring>
#include <iostream>
using namespace std;

// recuring function to find
// ways in how many ways a
// string can be decoded of length
// greater than 0 and starting with
// digit 1 and greater.
int countDecoding(char* digits, int n)
{
// base cases
if (n == 0 || n == 1)
return 1;
if (digits[0] == '0')
return 0;

// for base condition "01123" should return 0
// Initialize count
int count = 0;

// If the last digit is not 0,
// then last digit must add
// to the number of words
if (digits[n - 1] > '0')
count = countDecoding(digits, n - 1);

// If the last two digits form a number smaller
// than or equal to 26, then consider
// last two digits and recur
if (digits[n - 2] == '1'
|| (digits[n - 2] == '2'
&& digits[n - 1] < '7'))
count += countDecoding(digits, n - 2);

return count;
}

// Given a digit sequence of length n,
// returns count of possible decodings by
// replacing 1 with A, 2 with B, ... 26 with Z
int countWays(char* digits, int n)
{
if (n == 0 || (n == 1 && digits[0] == '0'))
return 0;
return countDecoding(digits, n);
}

// Driver code
int main()
{
char digits[] = "1234";
int n = strlen(digits);
cout << "Count is " << countWays(digits, n);
return 0;
}





-------------------------------------------------------//Dynamic Programming-----------------------------------------------------------------

class Solution {
	public:
		int CountWays(string str){
		    // Code here
		    long long int  c[str.length() + 1];
		    if(str[0]=='0')
		    {
		        return 0;
		    }
		    for(int i=0;i<str.length();i++)
		    {
		        if(str[i]=='0' && str[i-1]>'2')
		        {
		            return 0;
		        }
		    }
		    c[0]=1;
		    c[1]=1;
		    for(int i=2;i<=str.length();i++)
		    {
		        c[i]=0;
		        if(str[i-1]>'0')
		        {
		            c[i]=c[i-1];
		        }
		        if(str[i-2]=='1' || (str[i-2]=='2' && str[i-1]<'7'))
		        {
		            c[i]+=c[i-2];
		        }
		        c[i]=c[i]%1000000007;
		    }
		    return c[str.length()]%1000000007;
		}

};

