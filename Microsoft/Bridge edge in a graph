class Solution
{
	public:
    //Function to find if the given edge is a bridge in graph.
    void dfs(vector<int>adj[], int V, vector<int>&visited, int src)
    {
        visited[src]=1;
        for(auto it= adj[src].begin() ; it <adj[src].end(); it++)
        {
            if(visited[*it]!=1)
            {
                dfs(adj,V,visited,*it);
            }
        }
    }
    int isBridge(int V, vector<int> adj[], int c, int d) 
    {
        // Code here
        auto it = find(adj[c].begin(), adj[c].end(),d);
        auto itt=find(adj[d].begin(),adj[d].end(), c);
        
        adj[c].erase(it);
        adj[d].erase(itt);
        
        vector<int>visited(V,0);
        dfs(adj,V,visited,c);
        
        if(visited[d]!=1)
        {
            return 1;
        }
        return 0;
    }
};


------------------------------------------------------------------------------------------------------------
class Solution
{
	public:
	//Function to perform DFS on graph.
	void DFS(vector<int> adj[], int v, bool visited[])
	{
	    //marking the current vertex as visited.
        visited[v] = true;
        vector<int>::iterator i;
        
        //traversing over the adjacent vertices.
        for (i = adj[v].begin(); i != adj[v].end(); ++i)
        
            //if any vertex is not visited, we call the function  
            //recursively for adjacent node.
            if (!visited[*i]) 
                DFS(adj, *i, visited);
    }
    
    //Function to find whether graph is connected.
    bool isConnected(vector<int> adj[], int V, int one, int two) 
    {
        //using boolean array to mark visited nodes and currently 
        //marking all the nodes as false.
        bool visited[V] = {0};
        memset(visited, false, sizeof(visited));
        
        //finding all reachable vertices from first vertex 
        //and marking them visited.
        DFS(adj, one, visited);
        
        //if second vertex is not visited, we return false else true.
        if (visited[two] == false) 
            return false;
        return true;
    }
    
    //Function to find if the given edge is a bridge in graph.
    int isBridge(int V, vector<int> adj[], int c, int d)
    {
        //if graph is not connected, we return false.
        if (!isConnected(adj, V, c, d))
            return 0;
        else
        {
            //we remove edge from undirected graph.
            adj[c].erase(remove(adj[c].begin(), adj[c].end(), d), adj[c].end());
            adj[d].erase(remove(adj[d].begin(), adj[d].end(), c), adj[d].end());
            
            //if graph is connected, we return false else true.
            if (isConnected(adj, V, c, d))
                return 0;
            else
                return 1;
        }
    }
};



------------------------------------------------------------------------------------------------------------

// A recursive function that finds and prints bridges using
// DFS traversal
// u --> The vertex to be visited next
// visited[] --> keeps track of visited vertices
// disc[] --> Stores discovery times of visited vertices
// parent[] --> Stores parent vertices in DFS tree
void Graph::bridgeUtil(int u, bool visited[], int disc[],
                                  int low[], int parent[])
{
    // A static variable is used for simplicity, we can
    // avoid use of static variable by passing a pointer.
    static int time = 0;
 
    // Mark the current node as visited
    visited[u] = true;
 
    // Initialize discovery time and low value
    disc[u] = low[u] = ++time;
 
    // Go through all vertices adjacent to this
    list<int>::iterator i;
    for (i = adj[u].begin(); i != adj[u].end(); ++i)
    {
        int v = *i;  // v is current adjacent of u
 
        // If v is not visited yet, then recur for it
        if (!visited[v])
        {
            parent[v] = u;
            bridgeUtil(v, visited, disc, low, parent);
 
            // Check if the subtree rooted with v has a
            // connection to one of the ancestors of u
            low[u]  = min(low[u], low[v]);
 
            // If the lowest vertex reachable from subtree
            // under v is  below u in DFS tree, then u-v
            // is a bridge
            if (low[v] > disc[u])
              cout << u <<" " << v << endl;
        }
 
        // Update low value of u for parent function calls.
        else if (v != parent[u])
            low[u]  = min(low[u], disc[v]);
    }
}
 
// DFS based function to find all bridges. It uses recursive
// function bridgeUtil()
void Graph::bridge()
{
    // Mark all the vertices as not visited
    bool *visited = new bool[V];
    int *disc = new int[V];
    int *low = new int[V];
    int *parent = new int[V];
 
    // Initialize parent and visited arrays
    for (int i = 0; i < V; i++)
    {
        parent[i] = NIL;
        visited[i] = false;
    }
 
    // Call the recursive helper function to find Bridges
    // in DFS tree rooted with vertex 'i'
    for (int i = 0; i < V; i++)
        if (visited[i] == false)
            bridgeUtil(i, visited, disc, low, parent);
}
