class Solution {
public:
    vector<unordered_set<int>> makegraph (int N, vector<pair<int,int>>& prerequisites)
    {
        vector<unordered_set<int>>graph(N);
        for(auto x: prerequisites)
        {
            graph[x.second].insert(x.first);
        }
        return graph;
    }
    bool dfs(vector<unordered_set<int>>& graph, int node, vector<bool>&onpath , vector<bool>&visited)
    {
        if(visited[node])
        {
            return false;
        }
        onpath[node]=true;
        visited[node]=true;
        for( auto x: graph[node])
        {
            if(onpath[x] || dfs(graph,x,onpath,visited))
            {
                return true;
            }
        }
        onpath[node]=false;
        return false;
    }
	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    // Code here
	    
	    vector<unordered_set<int>>graph=makegraph(N, prerequisites);
	    
	    vector<bool>onpath(N,false),visited(N,false);
	    for(int i=0;i<N;i++)
	    {
	        if(!visited[i] && dfs(graph,i,onpath,visited))
	        {
	            return false;
	        }
	    }
	    return true;
	}
};
